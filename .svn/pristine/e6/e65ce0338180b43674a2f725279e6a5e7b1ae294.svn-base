package com.searun.orderoperation.application;

import io.yunba.android.manager.YunBaManager;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;

import org.eclipse.paho.client.mqttv3.IMqttActionListener;
import org.eclipse.paho.client.mqttv3.IMqttToken;

import android.app.ActivityManager;
import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.baidu.mapapi.BMapManager;
import com.baidu.mapapi.MKGeneralListener;
import com.baidu.mapapi.map.MKEvent;
import com.searun.orderoperation.entity.UserInfo;
import com.searun.orderoperation.util.CommonUtils;
import com.searun.orderoperation.util.MyCrashHandler;
import com.searun.orderoperation.util.YunbaUtil;

public class ApplicationPool extends Application {

	private WeakHashMap<String, Object> cache;
	// 存放各个下载器
	// public static Map<String, DownloaderTask> downloaderMaps = new
	// HashMap<String, DownloaderTask>();
	// 存放与下载器对应的进度条
	public static Map<String, ProgressBar> ProgressBars = new HashMap<String, ProgressBar>();

	public BMapManager mBMapManager = null;

	private static ApplicationPool mInstance = null;

	public boolean m_bKeyRight = true;

	private SharedPreferences sPreferences;

	public static String userID;

	public static String weatherKey;

	public static String gasStationKey;

	public static int screenWidth;

	public static int screenHeight;

	public static String UUID;

	public static String memberType;

	public static String password;

	public static String userName;

	private Context context;

	private Map<String, UserInfo> contactList;

	public static Long dispatch;

	public static String phone;

	@Override
	public void onCreate() {
		super.onCreate();
		mInstance = this;
		context = getApplicationContext();
		MyCrashHandler crashHandler = MyCrashHandler.getInstance();
		// 注册crashHandler
		crashHandler.init(getApplicationContext());

		Thread.setDefaultUncaughtExceptionHandler(crashHandler);

		int pid = android.os.Process.myPid();
		String processAppName = getAppName(pid);
		// 如果使用到百度地图或者类似启动remote service的第三方库，这个if判断不能少
		if (processAppName == null || processAppName.equals("")) {
			// workaround for baidu location sdk
			// 百度定位sdk，定位服务运行在一个单独的进程，每次定位服务启动的时候，都会调用application::onCreate
			// 创建新的进程。
			// 但环信的sdk只需要在主进程中初始化一次。 这个特殊处理是，如果从pid 找不到对应的processInfo
			// processName，
			// 则此application::onCreate 是被service 调用的，直接返回
			return;
		}

		initEngineManager(this);
		sPreferences = getSharedPreferences(ConstantPool.OPERATION_PREFERENCES,
				Context.MODE_PRIVATE);
		// 保存手机号码
		Editor editor = sPreferences.edit();
		// editor.putString("localPhoneNo", "18914782880");// 手机号
		editor.putString("localIMEINo",
				CommonUtils.getLocalIMEINo(getApplicationContext()));// IMEI码
		editor.commit();
		userID = CommonUtils.getLocalIMEINo(getApplicationContext());
		weatherKey = "62a83fb096fab04c883d0a01598cfc9c";
		gasStationKey = "3bee66805692fa6f3fff1e3f4ecc908d";

		DisplayMetrics display = getResources().getDisplayMetrics();
		screenWidth = display.widthPixels;
		screenHeight = display.heightPixels;
	}

	/**
	 * 初始化云巴推送
	 */
	private void initYunba() {
		YunBaManager.start(context);

		YunBaManager.subscribe(context, new String[] { "t1", "t2", "t3" },
				new IMqttActionListener() {

					@Override
					public void onSuccess(IMqttToken asyncActionToken) {
						String topic = YunbaUtil.join(
								asyncActionToken.getTopics(), ",");
						Log.d("TAG", "Subscribe succeed : " + topic);
						// DemoUtil.showToast( "Subscribe succeed : " + topic,
						// getApplicationContext());
						StringBuilder showMsg = new StringBuilder();
						showMsg.append("subscribe succ：")
								.append(YunBaManager.MQTT_TOPIC).append(" = ")
								.append(topic);
					}

					@Override
					public void onFailure(IMqttToken asyncActionToken,
							Throwable exception) {
						String msg = "Subscribe failed : "
								+ exception.getMessage();
						Log.d("TAG", msg);
						// DemoUtil.showToast(msg, getApplicationContext());
						//

					}
				});
	}

	public static String getPhone() {
		return phone;
	}

	public static void setPhone(String phone) {
		ApplicationPool.phone = phone;
	}

	public static Long getDispatch() {
		return dispatch;
	}

	public static void setDispatch(Long dispatch) {
		ApplicationPool.dispatch = dispatch;
	}

	public static String getUserName() {
		return userName;
	}

	public static void setUserName(String userName) {
		ApplicationPool.userName = userName;
	}

	public static String getUUID() {
		return UUID;
	}

	public static void setUUID(String uUID) {
		UUID = uUID;
	}

	public static String getMemberType() {
		return memberType;
	}

	public static void setMemberType(String memberType) {
		ApplicationPool.memberType = memberType;
	}

	public static String getPassword() {
		return password;
	}

	public static void setPassword(String password) {
		ApplicationPool.password = password;
	}

	public ApplicationPool() {
		cache = new WeakHashMap<String, Object>();
	}

	public static ApplicationPool getInstance() {
		return mInstance;
	}

	private String getAppName(int pID) {
		String processName = null;
		ActivityManager am = (ActivityManager) this
				.getSystemService(ACTIVITY_SERVICE);
		List l = am.getRunningAppProcesses();
		Iterator i = l.iterator();
		PackageManager pm = this.getPackageManager();
		while (i.hasNext()) {
			ActivityManager.RunningAppProcessInfo info = (ActivityManager.RunningAppProcessInfo) (i
					.next());
			try {
				if (info.pid == pID) {
					CharSequence c = pm.getApplicationLabel(pm
							.getApplicationInfo(info.processName,
									PackageManager.GET_META_DATA));
					// Log.d("Process", "Id: "+ info.pid +" ProcessName: "+
					// info.processName +"  Label: "+c.toString());
					// processName = c.toString();
					processName = info.processName;
					return processName;
				}
			} catch (Exception e) {
				// Log.d("Process", "Error>> :"+ e.toString());
			}
		}
		return processName;
	}

	public static void setServerIp(Context context) {
//		 String SERVER_URL = "http://192.168.2.36:8080/Searun_platform/";
		String SERVER_URL = "http://www.56wtb.com/";
		NetWork.setServerIp(SERVER_URL);
	}

	public void initEngineManager(Context context) {
		if (mBMapManager == null) {
			mBMapManager = new BMapManager(context);
		}

		if (!mBMapManager.init(new MyGeneralListener())) {
			Toast.makeText(
					ApplicationPool.getInstance().getApplicationContext(),
					"BMapManager  初始化错误!", Toast.LENGTH_LONG).show();
		}
	}

	// 常用事件监听，用来处理通常的网络错误，授权验证错误等
	public static class MyGeneralListener implements MKGeneralListener {

		@Override
		public void onGetNetworkState(int iError) {
			if (iError == MKEvent.ERROR_NETWORK_CONNECT) {
				Toast.makeText(
						ApplicationPool.getInstance().getApplicationContext(),
						"您的网络出错啦！", Toast.LENGTH_LONG).show();
			} else if (iError == MKEvent.ERROR_NETWORK_DATA) {
				Toast.makeText(
						ApplicationPool.getInstance().getApplicationContext(),
						"输入正确的检索条件！", Toast.LENGTH_LONG).show();
			}
			// ...
		}

		@Override
		public void onGetPermissionState(int iError) {
			// 非零值表示key验证未通过
			if (iError != 0) {
				// 授权Key错误：
				Toast.makeText(
						ApplicationPool.getInstance().getApplicationContext(),
						"请在 ApplicationPool.java文件输入正确的授权Key,并检查您的网络连接是否正常！error: "
								+ iError, Toast.LENGTH_LONG).show();
				ApplicationPool.getInstance().m_bKeyRight = false;
			} else {
				ApplicationPool.getInstance().m_bKeyRight = true;
				Toast.makeText(
						ApplicationPool.getInstance().getApplicationContext(),
						"key认证成功", Toast.LENGTH_LONG).show();
			}
		}
	}

	/**
	 * 退出登录,清空数据
	 */
	public void logout() {
		// 先调用sdk logout，在清理app中自己的数据
		// reset password to null
		setPassword(null);

	}
}
