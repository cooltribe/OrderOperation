package com.searun.orderoperation.activity;

import org.json.JSONException;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import com.searun.orderoperation.R;
import com.searun.orderoperation.application.ApplicationPool;
import com.searun.orderoperation.application.ConstantPool;
import com.searun.orderoperation.application.NetWork;
import com.searun.orderoperation.customview.MuInputEditText;
import com.searun.orderoperation.customview.ProgressAlertDialog;
import com.searun.orderoperation.datacenter.DataHandler;
import com.searun.orderoperation.datacenter.OnDataReceiveListener;
import com.searun.orderoperation.datahandler.LoginHandler;
import com.searun.orderoperation.entity.CarsDto;
import com.searun.orderoperation.entity.PdaRequest;
import com.searun.orderoperation.entity.PdaResponse;
import com.searun.orderoperation.entity.UserInfo;
import com.searun.orderoperation.jsonparser.LoginJsonParser;
import com.searun.orderoperation.provider.DBOperate;
import com.searun.orderoperation.util.CommonUtils;
import com.searun.orderoperation.util.ToastUtil;

@SuppressLint("HandlerLeak")
public class LoginActivity extends BaseActivity implements OnClickListener,
		OnDataReceiveListener {

	/**
	 * 返回按钮
	 */
	private ImageView maintitle_back_iv;

	/**
	 * 标题title
	 */
	private TextView defaulttitle_title_tv;

	private Context context;

	/**
	 * 登录按钮
	 */
	private Button login_submit;

	/**
	 * 账号
	 */
	private MuInputEditText login_userID;

	/**
	 * 密码
	 */
	private MuInputEditText login_password;

	/**
	 * 登录成功
	 */
	private final int LOGIN_CODE_SUCCESS = 100;
	/**
	 * 请求参数不能为空
	 */
	private final int LOGIN_CODE_PARAMETER_NULL = 101;
	/**
	 * 参数中用户名不能为空
	 */
	private final int LOGIN_CODE_USERNAME_NULL = 102;
	/**
	 * 参数中密码不能为空
	 */
	private final int LOGIN_CODE_PASSWORD_NULL = 103;
	/**
	 * 用户名不存在
	 */
	private final int LOGIN_CODE_USERNAME_UNINVAILED = 104;
	/**
	 * 密码不正确，请重新输入
	 */
	private final int LOGIN_CODE_PASSWORD_WRONG = 105;
	/**
	 * 登录验证失败
	 */
	private final int LOGIN_CODE_INVAILED = 106;

	/**
	 * 显示进度条
	 */
	private final int SHOW_PROGRESS = 1000;
	/**
	 * 关闭进度条
	 */
	private final int CLOSE_PROGRESS = 1001;
	private final int SHOW_TOAST = 1002;

	private SharedPreferences sPreferences;

	private DBOperate dbOperate;

	private ProgressAlertDialog progressDialog;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
		setContentView(R.layout.activity_login);
		getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE,
				R.layout.deflaut_titlebar); // titlebar为自己标题栏的布局
		context = getApplicationContext();
		sPreferences = getSharedPreferences(ConstantPool.OPERATION_PREFERENCES,
				Context.MODE_PRIVATE);
		dbOperate = DBOperate.getInstance(context);
		initView();
		ToastUtil.show(context, getIntent().getStringExtra("toast"));
	}

	@Override
	public void initView() {
		maintitle_back_iv = (ImageView) findViewById(R.id.maintitle_back_iv);
		maintitle_back_iv.setVisibility(View.GONE);
		maintitle_back_iv.setOnClickListener(this);

		defaulttitle_title_tv = (TextView) findViewById(R.id.defaulttitle_title_tv);
		defaulttitle_title_tv.setText(R.string.login_title);

		login_submit = (Button) findViewById(R.id.login_submit);
		// login_submit.setEnabled(false);

		login_userID = (MuInputEditText) findViewById(R.id.login_userID);
		String userName = sPreferences.getString("userName", "");
		login_userID.setText(userName);
		login_userID.addTextChangedListener(textWatcherListener);

		login_password = (MuInputEditText) findViewById(R.id.login_password);
		String password = sPreferences.getString("password", "");
		login_password.setText(password);
		// login_password.addTextChangedListener(textWatcherListener);

		doCheckUserInfo(userName);
	}

	@Override
	public void onClick(View view) {
		switch (view.getId()) {
		case R.id.maintitle_back_iv:
			CommonUtils.finishActivity(this);
			break;

		default:
			break;
		}
	}

	@Override
	public void onClickListener(View view) {
		switch (view.getId()) {
		case R.id.login_submit:
			doLoginSubmit();
			break;
		case R.id.registBtn:
			doRegister();
			break;
		case R.id.getPassWordBtn:
			doResetPassword();
			break;

		default:
			break;
		}
	}

	private Handler myHandler = new Handler() {

		public void handleMessage(android.os.Message msg) {
			dismissProgress();
			switch (msg.what) {
			case LOGIN_CODE_SUCCESS:
				// Intent imIntent = new Intent(LoginActivity.this,
				// LoginIMServerService.class);
				// startService(imIntent);
				Intent intent = new Intent(LoginActivity.this,
						SignInActivity.class);
				startActivity(intent);
				finish();
				break;
			case LOGIN_CODE_PARAMETER_NULL:
			case LOGIN_CODE_USERNAME_NULL:
			case LOGIN_CODE_PASSWORD_NULL:
			case LOGIN_CODE_INVAILED:
				ToastUtil.show(context, msg.obj.toString());
				break;
			case LOGIN_CODE_USERNAME_UNINVAILED:
				login_userID.showPopWindow(LoginActivity.this,
						msg.obj.toString());
				break;
			case LOGIN_CODE_PASSWORD_WRONG:
				login_password.showPopWindow(LoginActivity.this,
						msg.obj.toString());
				break;
			case SHOW_PROGRESS:
				showProgress();
				break;
			case CLOSE_PROGRESS:
				dismissProgress();
				break;
			case SHOW_TOAST:
				ToastUtil.show(context, msg.obj.toString());
				break;

			default:
				break;
			}
		};
	};

	/**
	 * 重置密码
	 */
	private void doResetPassword() {
		CommonUtils.addActivity(this);
		Intent intent = new Intent(LoginActivity.this,
				RetrievePasswordAuthcodeActivity.class);
		startActivity(intent);
	}

	/**
	 * 执行注册
	 */
	private void doRegister() {
		CommonUtils.addActivity(this);
		Intent intent = new Intent(LoginActivity.this, RegisterActivity.class);
		startActivity(intent);

	}

	/**
	 * 执行登录操作
	 */
	private void doLoginSubmit() {

		if (login_userID.getText().length() == 0) {
			login_userID.showPopWindow(LoginActivity.this, "请输入正确的账号");
			return;
		}

		if (!CommonUtils.isPasswordTypeCorrect(login_password.getText()
				.toString())) {
			login_password.showPopWindow(LoginActivity.this, getResources()
					.getString(R.string.psw_number_format));
			return;
		}
		myHandler.sendEmptyMessage(SHOW_PROGRESS);
		CommonUtils.closeKeyboard(context, login_password);
		CommonUtils.closeKeyboard(context, login_userID);
		CarsDto loginInfo = new CarsDto();
		loginInfo.setVehicleNum(login_userID.getText().toString());
		loginInfo.setPassword(login_password.getText().toString());
		PdaRequest<CarsDto> request = new PdaRequest<CarsDto>();
		request.setData(loginInfo);
		LoginHandler loginHandler = new LoginHandler(context, request);
		loginHandler.setOnDataReceiveListener(this);
		loginHandler.startNetWork();

	}

	@Override
	public void onDataReceive(DataHandler dataHandler, int resultCode,
			Object data, int type) {
		switch (resultCode) {
		case NetWork.LOGIN_OK:
			doLoginSuccess(data);
			break;
		case NetWork.LOGIN_ERROR:
			myHandler.sendEmptyMessage(CLOSE_PROGRESS);
			ToastUtil.show(context,
					getResources().getString(R.string.network_error_hint));
			break;

		default:

			break;
		}
	}

	/**
	 * 登录成功
	 */
	private void doLoginSuccess(Object data) {
		String dataString = null;
		try {
			dataString = new String((byte[]) data, "UTF-8");
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		try {
			PdaResponse<CarsDto> response = LoginJsonParser
					.parserLoginJson(dataString);
			if (null != response && response.isSuccess()) {// 登录成功
				CarsDto result = response.getData();
				// 保存登录信息
				Editor editor = sPreferences.edit();
				editor.putString("password", login_password.getText()
						.toString());
				// editor.putString("userName", result.getVehicleNum());
				editor.putString("userName", login_userID.getText().toString());
				editor.putString("vehicleNum", result.getVehicleNum());
				editor.putString("phone", result.getMobile());
				editor.commit();
				ApplicationPool.setUUID(result.getVehicleNum());
				ApplicationPool
						.setPassword(login_password.getText().toString());
				ApplicationPool.setUserName(result.getVehicleNum());
				ApplicationPool.setPhone(result.getMobile());
				UserInfo userInfo = new UserInfo();
				userInfo.setUuId(result.getVehicleNum());
				userInfo.setUSER_NAME(result.getVehicleNum());
				// 密码使用明文保存
				userInfo.setPASSWORD(login_password.getText().toString());
				userInfo.setIsLogin("Y");
				dbOperate.updateUserInfo(userInfo);
				myHandler.sendEmptyMessage(LOGIN_CODE_SUCCESS);
			} else {// 登录失败
				Message msg = myHandler.obtainMessage();
				msg.what = SHOW_TOAST;
				try {
					msg.obj = response.getMessage();
				} catch (Exception e) {
					e.printStackTrace();
					msg.obj = getResources().getString(
							R.string.network_error_hint);
				}
				msg.sendToTarget();
			}
		} catch (JSONException e) {
			e.printStackTrace();
			myHandler.sendEmptyMessage(CLOSE_PROGRESS);
		}
	}

	private TextWatcher textWatcherListener = new TextWatcher() {

		@Override
		public void onTextChanged(CharSequence arg0, int arg1, int arg2,
				int arg3) {

		}

		@Override
		public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
				int arg3) {

		}

		@Override
		public void afterTextChanged(Editable arg0) {
			// 登录按钮是否可点击操作判断
			// login_userID.dismissPopWindow();
			// login_password.dismissPopWindow();
			// if (login_userID.length() > 0 && login_password.length() > 0) {
			// login_submit.setEnabled(true);
			// login_submit
			// .setBackgroundResource(R.drawable.confirm_back_button_select);
			// } else {
			// login_submit.setEnabled(false);
			// login_submit
			// .setBackgroundResource(R.drawable.submint_btn_unfocaus);
			// }

			doCheckUserInfo(arg0.toString());
		}
	};

	private void showProgress() {
		if (progressDialog == null) {
			progressDialog = new ProgressAlertDialog(this);
		} else {
			progressDialog.show();
		}
	}

	/**
	 * 匹配头像
	 * 
	 * @param arg0
	 */
	protected void doCheckUserInfo(String userName) {
		UserInfo userInfo = dbOperate.getUesrInfoByUserName(userName);
		if (null == userInfo) {
		} else {
		}
	}

	private void dismissProgress() {
		if (progressDialog != null) {
			progressDialog.dismiss();
		}
	}
}
